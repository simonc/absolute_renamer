#!/usr/bin/env ruby

#
# = Synopsis
#
# Does a batch renaming on files and directories
#
# = Usage
#
# absrenamer [options] [file]...
#
# = Description
#
# AbsoluteRenamer is a very powerful tool that helps files and directories
# renaming using the Krename syntax.
#
# = Example
#
#   absrenamer -f '[1;2]_[*4-]' *.mp3
#   # => takes the first two characters of the original name
#   #    and Camelizes from the fourth to the end.
#
# = Copyright (c) 2011 Simon COURTOIS
# Licensed under the GNU Public License

# TODO: remove
# $:.unshift File.expand_path('../../lib', __FILE__)

require 'slop'
require 'absolute_renamer'

include AbsoluteRenamer

plugin_loader = PluginLoader.new
plugin_loader.load_plugin_gems!
interpreters = plugin_loader.interpreters

interpreters += [
  Interpreters::CounterInterpreter.new,
  Interpreters::FilenamePartsInterpreter.new,
  Interpreters::OriginalFilenameInterpreter.new
]

config = Slop.parse! do
  on :D, :destination=, 'Destination directory for copy, move and link modes'
  on :d, :directories, 'Directories handling'
  on     :dots=, 'Number of dots to get file extension', as: Integer, default: 1
  on :F, :force, 'Force the new files creation'
  on :f, :format=, 'Format string used as model', default: '$'
  on :l, :list, 'Only display how files will be renamed'
  on :m, :mode=, 'Renaming mode', :default => :move, as: Symbol
  on :n, :'no-extension', 'Removes the extension'
  on :x, :'ext-format=', 'Format string used as model for the extension', default: '$'

  on :r, :replace=, 'Search and replace', as: Array do |pattern, value|
    if pattern =~ %r(^/(.*)/$)
      pattern = Regexp.new($1)
    end

    interpreters << Interpreters::SimpleInterpreter.new(pattern, value)
  end

  on :h, :help, 'Display this help message.', tail: true do
    $stderr.puts help
    exit
  end

  separator <<-END


    RENAMING MODES

    Renaming mode can be specified using the --mode (-m) option.
    Any option works with the --destination (-D) option.
    MODE can be any of the followings:

      * move (default): Moves <old name> to <new name>
      * copy: Creates a copy of <old name> named <new name>
      * link: Creates a hard link <new name> which points to <old name>
      * symlink: Creates a symbolic link <new name> which points to <old name>


    SEARCH AND REPLACE

    When using the --replace option, you can do simple string replacement:

      --replace 'hello,hi'

    But you can also use a regular expression to do the job:

      --replace '/picture_(\\d+)/,pic-\\1'

    EXAMPLES

    absrenamer -f 'pics-##'  *.jpg
      => renames all files files in the current directory ending in .jpg to
         'pics-01.jpg', 'pics-02.jpg' ...

    absrenamer -f 'pics-##' -x 'jpg' *.JPEG
      => renames all files files in the current directory ending in .JPEG to
         'pics-01' and normalising the file extension to 'jpg'

    absrenamer -f '[1;2]_[*4-]' *.mp3
      => takes the first two characters of the original name
         and camelizes from the fourth to the end.

  END
end

if ARGV.empty?
  puts config
  exit
end

path_handlers = ARGV.select { |path| File.directory?(path) == config.directories? }
                    .map    { |path| PathHandler.new path, config }
                    .sort


name_maker = NameMaker.new(interpreters)
renamer = Renamer.new

path_handlers.each do |path_handler|
  path_handler.set_new_path! name_maker
  path_handler.rename! renamer,
                       config[:mode],
                       config[:destination],
                       force: config[:force],
                       noop: config[:list],
                       verbose: true
end

